{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "", "title": "comfortablely numb's Title", "subTitle": "Blog description", "avatarUrl": "https://pic.rmb.bdstatic.com/bjh/240707/74bb18409978753f72ea8236f9cde5fe408.jpeg@h_1280", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/the first blog.html", "labels": ["documentation"], "postTitle": "the first blog", "postUrl": "post/the%20first%20blog.html", "postSourceUrl": "https://github.com/pleasedontbreak123/pleasedontbreak123.github.io/issues/1", "commentNum": 0, "wordCount": 4, "description": "test\u3002", "top": 0, "createdAt": 1724676129, "style": "", "script": "", "head": "", "ogImage": "https://pic.rmb.bdstatic.com/bjh/240707/74bb18409978753f72ea8236f9cde5fe408.jpeg@h_1280", "createdDate": "2024-08-26", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/bing-cha-ji-\uff08Disjoint sets\uff09.html", "labels": ["documentation"], "postTitle": "\u5e76\u67e5\u96c6\uff08Disjoint sets\uff09", "postUrl": "post/bing-cha-ji-%EF%BC%88Disjoint%20sets%EF%BC%89.html", "postSourceUrl": "https://github.com/pleasedontbreak123/pleasedontbreak123.github.io/issues/2", "commentNum": 0, "wordCount": 3085, "description": "# \u5e76\u67e5\u96c6 (Disjoint sets)\r\n\r\n\r\n## 1.\u4e09\u79cd\u601d\u8def\r\n### 1.1 listOfSetsDS\r\n\r\n\u57fa\u4e8eList \r\n| connect | isConnect |\r\n|------|--------|\r\n| O(n) | O(n) |\r\n\r\n### 1.2 QuickFindDs\r\n\u57fa\u4e8e\u6570\u7ec4 \r\n| connect | isConnect |\r\n|------|--------|\r\n| O(n) | O(1) |\r\n\r\n### 1.3 QuickUnionDs //\u6700\u5e38\u7528 \u6700\u4f73\u65b9\u6848\r\n\u57fa\u4e8e\u6570\u7ec4 \r\n| connect | isConnect |\r\n|------|--------|\r\n| O(n) | O(n) |\r\n\r\n\r\n## 2.\u5b9e\u73b0 QuickUnionDS\r\n\r\n#### \u4f18\u5316\u4e00 \u52a0\u6743\u5e76\u67e5\u96c6\r\n\u4fdd\u8bc1\u8ba9\u5c0f\u6811\u5408\u5e76\u5230\u5927\u6811\u4e0a\r\n\r\n\u8ffd\u8e2a\u6bcf\u4e2a\u6811\u7684\u5927\u5c0f\uff08\u5728root\u4e0a\u7528\u8d1f\u53f7\u6811\u8282\u70b9\u6570\u8868\u793a\uff09\r\n**\u4fdd\u8bc1\u4e86\u67e5\u5230\u6839\u8282\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(log N)**\r\n| connect | isConnect |\r\n|------|--------|\r\n| O(logn) | O(logn) |\r\n\r\n#### \u4f18\u5316\u4e8c \u8def\u5f84\u538b\u7f29 \r\n\u722c\u6811\u7684\u540c\u65f6\u5c55\u5e73\u6811\uff0c\u5c06\u8282\u70b9\u8fde\u63a5\u5230root\u4e0a\uff0c\u5c06\u6811\u6241\u5e73\u5316\r\n\r\nJava \u5b9e\u73b0  from cs61b2024\r\n\r\n```public class UnionFind {\r\n    private final int[] s;\r\n    // TODO: Instance variables\r\n\r\n    /* Creates a UnionFind data structure holding N items. Initially, all\r\n       items are in disjoint sets. */\r\n    public UnionFind(int N) {\r\n        // TODO: YOUR CODE HERE \u521d\u59cb\u5316\u6570\u7ec4\u90fd\u7f6e-1\r\n        s = new int[N];\r\n        for (int i=0;i < s.length;i++){\r\n            s[i] = -1;\r\n        }\r\n    }\r\n\r\n    /* Returns the size of the set V belongs to. */\r\n    public int sizeOf(int v) {\r\n        // TODO: YOUR CODE HERE\r\n        int root = find(v);\r\n        return -s[root];\r\n\r\n    }\r\n\r\n    /* Returns the parent of V. If V is the root of a tree, returns the\r\n       negative size of the tree for which V is the root. */\r\n    public int parent(int v) {\r\n        // TODO: YOUR CODE HERE\r\n        if(s[v] > 0){\r\n            return s[v];\r\n        }else {\r\n            return -sizeOf(v);\r\n        }\r\n\r\n    }\r\n\r\n    /* Returns true if nodes/vertices V1 and V2 are connected. */\r\n    public boolean connected(int v1, int v2) {\r\n        // TODO: YOUR CODE HERE\r\n        if (find(v1) == find(v2)){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* Returns the root of the set V belongs to. Path-compression is employed\r\n       allowing for fast search-time. If invalid items are passed into this\r\n       function, throw an IllegalArgumentException. */\r\n    public int find(int v) {\r\n        // TODO: YOUR CODE HERE\r\n        if(v < 0 || v > s.length){\r\n            throw new IllegalArgumentException('\u975e\u6cd5\u7684\u7d22\u5f15');\r\n        }\r\n        if(s[v] < 0){\r\n            return v;\r\n        }else {\r\n            s[v] = find(s[v]);//\u9012\u5f52\u5b9e\u73b0\u8def\u5f84\u538b\u7f29\r\n            return s[v];\r\n        }\r\n    }\r\n\r\n    /* Connects two items V1 and V2 together by connecting their respective\r\n       sets. V1 and V2 can be any element, and a union-by-size heuristic is\r\n       used. If the sizes of the sets are equal, tie break by connecting V1's\r\n       root to V2's root. Union-ing an item with itself or items that are\r\n       already connected should not change the structure. */\r\n    public void union(int v1, int v2) {\r\n        // TODO: YOUR CODE HERE\r\n        int root1 = find(v1);\r\n        int root2 = find(v2);\r\n        if (root1 == root2){\r\n            return;\r\n        }\r\n\r\n        if (s[root1] >= s[root2]){//\u7531\u4e8e\u5b58\u7684\u662f\u8d1f\u6570 \u5b9e\u9645\u4e0a\u68112\u7684\u8d28\u91cf\u5927\u4e8e\u68111\r\n\r\n            s[root2] = s[root2]+s[root1];\r\n            s[root1] = root2;\r\n\r\n        }else {\r\n            s[root1] = s[root1]+s[root2];\r\n            s[root2] = root1;\r\n        }\r\n    }\r\n\r\n} \r\n```\u3002", "top": 0, "createdAt": 1725365889, "style": "", "script": "", "head": "", "ogImage": "https://pic.rmb.bdstatic.com/bjh/240707/74bb18409978753f72ea8236f9cde5fe408.jpeg@h_1280", "createdDate": "2024-09-03", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "comfortablely numb's Title", "faviconUrl": "https://pic.rmb.bdstatic.com/bjh/240707/74bb18409978753f72ea8236f9cde5fe408.jpeg@h_1280", "ogImage": "https://pic.rmb.bdstatic.com/bjh/240707/74bb18409978753f72ea8236f9cde5fe408.jpeg@h_1280", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://pleasedontbreak123.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}